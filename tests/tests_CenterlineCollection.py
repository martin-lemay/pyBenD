# SPDX-FileCopyrightText: Copyright 2025 Martin Lemay <martin.lemay@mines-paris.org>
# SPDX-FileContributor: Martin Lemay
# ruff: noqa: E402 # disable Module level import not at top of file

__doc__ = """
Tests functions for CenterlineCollection class - Run with input data
centerline_Collection_test_data*.csv.
"""

import os
import unittest
from typing import Self

import matplotlib.pyplot as plt
import numpy as np
import numpy.typing as npt

import pybend.algorithms.plot_functions as plot
from pybend.algorithms.pybend_io import (
    load_centerline_collection_dataset_from_Flumy_csv,
)
from pybend.model.CenterlineCollection import (
    CenterlineCollection,
)
from pybend.model.enumerations import BendConnectionMethod, CreateSectionMethod
from pybend.utils.globalParameters import set_nb_procs

set_nb_procs(1)

# inputs

# output directory for figures
fig_path: str = "tests/.out/"
# create it if absent
if not os.path.exists(fig_path):
    os.makedirs(fig_path)

filepath_cl_collection: str = "tests/data/centerline_Collection_test_data.csv"
map_file: dict[int, str] = {
    10: "tests/data/centerline_Collection_test_data10.csv",
    40: "tests/data/centerline_Collection_test_data40.csv",
    70: "tests/data/centerline_Collection_test_data70.csv",
}

spacing: float = 2  # spacing between channel point (m)
smooth_distance: int = 5  # channel point location smoothing distance (m)
use_fix_nb_points: bool = False
filtering_window: int = 5  # number of points for filtered curvature
sinuo_thres: float = 1.00  # threshold for bends
n: float = 2  # exponent of curvature distribution function
compute_curvature: bool = True
interpol_props: bool = True
find_bends: bool = True

width: float = 30.0
depth: float = 3.0
flow_dir: npt.NDArray[np.float64] = np.array([1.0, 0.0])

# time warping paramters
dmax: float = 500.0
dtw_weights: tuple[tuple[float, float, float], ...] = (
    (0.1, 0.4, 0.4),
    (1.0, 0.0, 0.0),
    (0.0, 1.0, 0.0),
    (0.0, 0.0, 1.0),
)
pattern: str = "asymmetric"

nb_procs: int = 2  # number of procs

property_map: dict[int, dict[str, float]] = {
    10: {"Width": 20.0, "Discharge": 1e5},
    20: {"Width": 25.0, "Discharge": 1e5},
    30: {"Width": 30.0, "Discharge": 1e5},
    40: {"Width": 35.0, "Discharge": 1e5},
    50: {"Width": 40.0, "Discharge": 1e5},
    70: {"Width": 45.0, "Discharge": 1e5},
}

# sections params
section_pts_start: list[tuple[float, float]] = [
    (40, 50.0),
    (110, -50.0),
    (170, 70.0),
    (250, -60.0),
    (320, 60.0),
    (400, -40.0),
]
section_pts_end: list[tuple[float, float]] = [
    (40, 0.0),
    (140, 20.0),
    (200, -20.0),
    (280, 20.0),
    (360, -10.0),
    (440, 20.0),
]

section_apex_pts_start: list[tuple[float, float]] = [
    (111.048, -36.130),
    (183.297, 37.056),
    (257.548, -36.130),
    (331.800, 37.072),
    (406.051, -36.121),
]
section_apex_pts_end: list[tuple[float, float]] = [
    (110.047, 37.064),
    (184.298, -36.130),
    (257.548, 37.064),
    (331.800, -36.126),
    (405.050, 37.069),
]

section_middle_pts_start: list[tuple[float, float]] = [
    (111.048, -36.130),
    (183.297, 37.056),
    (257.548, -36.130),
    (331.800, 37.072),
    (406.051, -36.121),
]
section_middle_pts_end: list[tuple[float, float]] = [
    (110.781, 0.754),
    (184.293, 1.127),
    (257.805, 0.754),
    (331.659, 0.186),
    (405.170, -0.187),
]

# expected results
nb_centerlines_out: int = 7
ages_out: npt.NDArray[np.int64] = np.arange(10, 71, 10).astype(int)
eps: float = 1e-3

index_cl_pts_next_centerline_expected: list[list[list[int]]] = [
    [
        [0],
        [1],
        [2],
        [3],
        [4],
        [5],
        [6],
        [],
        [7],
        [8],
        [9],
        [10],
        [11],
        [12],
        [13],
        [],
        [14],
        [15],
        [],
        [16],
        [],
        [17],
        [],
        [18],
        [19, 20, 21, 22, 23, 24, 25],
        [26, 27, 28, 29, 30, 31, 32, 33],
        [34],
        [],
        [35],
        [],
        [36],
        [],
        [37],
        [38],
        [],
        [39],
        [40],
        [41],
        [42],
        [43],
        [44],
        [],
        [45],
        [46],
        [47],
        [48],
        [49],
        [50],
        [51],
        [52],
        [53],
        [54],
        [55],
        [56],
        [],
        [57],
        [58],
        [59],
        [60],
        [61],
        [62],
        [63],
        [64],
        [],
        [65],
        [66],
        [67],
        [],
        [68],
        [],
        [69],
        [],
        [70],
        [71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
        [81, 82, 83, 84, 85],
        [],
        [86],
        [],
        [87],
        [],
        [88],
        [89],
        [],
        [90],
        [91],
        [92],
        [93],
        [94],
        [95],
        [],
        [96],
        [97],
        [98],
        [99],
        [100],
        [101],
        [102],
        [103],
        [104],
        [105],
        [106],
        [],
        [107],
        [108],
        [109],
        [110],
        [111],
        [112],
        [113],
        [114],
        [115],
        [],
        [116],
        [117],
        [118],
        [],
        [119],
        [],
        [120],
        [],
        [121],
        [],
        [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134],
        [135, 136, 137],
        [],
        [138],
        [],
        [139],
        [],
        [140],
        [141],
        [],
        [142],
        [143],
        [144],
        [145],
        [],
        [146],
        [147],
        [148],
        [149],
        [150],
        [151],
        [152],
        [153],
        [154],
        [155, 156],
        [],
        [157],
        [],
        [158],
        [159],
        [160],
        [161],
        [162],
        [163],
        [164],
        [165],
        [166],
        [],
        [167],
        [168],
        [169],
        [],
        [170],
        [171],
        [],
        [172],
        [],
        [173],
        [],
        [
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
            186,
            187,
            188,
        ],
        [],
        [189],
        [],
        [190],
        [],
        [191],
        [192],
        [],
        [193],
        [194],
        [195],
        [196],
        [],
        [197],
        [198],
        [199],
        [200],
        [201],
        [202],
        [203],
        [204],
        [205],
        [206],
        [],
        [207],
        [208],
        [209],
        [210],
        [211],
        [212],
        [213],
        [214],
        [215],
        [216],
        [217],
        [],
        [218],
        [219],
        [220],
        [221],
        [],
        [222],
        [223],
        [],
        [224],
        [],
        [225],
        [],
        [
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240,
        ],
        [],
        [241],
        [],
        [242],
        [],
        [243],
        [244],
        [],
        [245],
        [246],
        [247],
        [],
        [248],
        [249],
        [250],
        [251],
        [252],
        [253],
        [254],
        [255],
        [256],
        [],
        [257],
        [258, 259],
        [],
        [260],
        [261],
        [262],
        [263],
        [264],
        [265],
        [266],
        [267],
        [268],
        [],
        [269],
        [270],
        [271],
        [272],
        [],
        [273],
        [274],
        [],
        [275],
        [],
        [276],
        [],
        [277, 278, 279, 280, 281, 282, 283, 284, 285, 286],
        [287, 288, 289, 290, 291, 292],
        [],
        [293],
        [],
        [294],
        [],
        [295],
        [],
        [296],
        [297],
        [298],
        [],
        [299],
        [300],
        [301],
        [302],
        [303],
        [304],
        [305],
        [306],
        [],
        [307],
        [308],
        [309],
        [310],
        [311],
        [312],
        [313],
        [314],
        [315],
        [316],
        [317],
        [318],
        [],
        [319],
        [],
        [320],
        [321, 322, 323],
        [324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336],
    ],
    [
        [0],
        [1],
        [2],
        [3],
        [4],
        [5],
        [6],
        [7],
        [8],
        [9],
        [10],
        [11],
        [12, 13],
        [14],
        [15],
        [16],
        [17],
        [18],
        [19],
        [20],
        [21, 22],
        [23],
        [24],
        [25],
        [26],
        [27],
        [28, 29],
        [30],
        [31],
        [32],
        [33],
        [34],
        [35],
        [36],
        [37],
        [38, 39],
        [40],
        [41],
        [42],
        [43],
        [44],
        [45],
        [46],
        [47],
        [48],
        [49],
        [50],
        [51],
        [52],
        [53],
        [54],
        [55],
        [56],
        [57],
        [58],
        [59],
        [60],
        [61],
        [62],
        [63],
        [64, 65],
        [66],
        [67],
        [68],
        [69],
        [70],
        [71],
        [72, 73],
        [74],
        [75],
        [76],
        [77],
        [78],
        [79, 80],
        [81],
        [82],
        [83],
        [84],
        [85],
        [86],
        [87],
        [88, 89],
        [90],
        [91],
        [92],
        [93],
        [94],
        [95],
        [96],
        [97],
        [98],
        [99],
        [100],
        [101],
        [102],
        [103],
        [104],
        [105],
        [106],
        [107],
        [108],
        [109],
        [110],
        [111],
        [112],
        [113],
        [114],
        [115],
        [116],
        [117, 118],
        [119],
        [120],
        [121],
        [122],
        [123, 124],
        [125],
        [126],
        [127],
        [128],
        [129, 130],
        [131],
        [132],
        [133],
        [134],
        [135],
        [136],
        [137, 138],
        [139],
        [140],
        [141],
        [142],
        [143],
        [144],
        [145],
        [146],
        [147],
        [148],
        [149],
        [150],
        [151],
        [152],
        [153],
        [154],
        [155],
        [156],
        [157],
        [158],
        [159],
        [160],
        [161],
        [162],
        [163],
        [164],
        [165],
        [166],
        [167],
        [168],
        [169, 170],
        [171],
        [172],
        [173],
        [174],
        [175, 176],
        [177],
        [178],
        [179],
        [180, 181],
        [182],
        [183],
        [184],
        [185],
        [186, 187],
        [188],
        [189],
        [190],
        [191],
        [192],
        [193],
        [194],
        [195],
        [196],
        [197],
        [198],
        [199],
        [200],
        [201],
        [202],
        [203],
        [204],
        [205],
        [206],
        [],
        [207],
        [208],
        [209],
        [210],
        [211],
        [212],
        [213, 214],
        [215],
        [216],
        [217],
        [218],
        [219],
        [220],
        [221],
        [222, 223],
        [224],
        [225],
        [226],
        [227, 228],
        [229],
        [230],
        [231],
        [232, 233],
        [234],
        [235],
        [236],
        [237, 238],
        [239],
        [240],
        [241],
        [242],
        [243],
        [244],
        [245, 246],
        [247],
        [248],
        [],
        [249],
        [250],
        [251],
        [252],
        [253],
        [254],
        [255],
        [256],
        [257],
        [258],
        [],
        [259],
        [260],
        [261],
        [262],
        [263],
        [264],
        [265],
        [266],
        [267, 268],
        [269],
        [270],
        [271],
        [272],
        [273],
        [274, 275],
        [276],
        [277],
        [278],
        [279, 280],
        [281],
        [282],
        [283, 284],
        [285],
        [286],
        [287],
        [288, 289],
        [290],
        [291],
        [292],
        [293, 294],
        [295],
        [296],
        [297],
        [298],
        [299],
        [300],
        [301],
        [302],
        [303],
        [304],
        [],
        [305],
        [306],
        [307],
        [308],
        [309],
        [310],
        [],
        [311],
        [312],
        [313],
        [314],
        [315],
        [316],
        [317],
        [318],
        [319],
        [320],
        [321, 322],
        [323],
        [324],
        [325],
        [326],
        [327, 328],
        [329],
        [330],
        [331],
        [332, 333, 334, 335, 336],
    ],
    [
        [0],
        [],
        [1],
        [],
        [2],
        [],
        [3],
        [],
        [4],
        [],
        [5],
        [],
        [6],
        [],
        [7],
        [],
        [8],
        [],
        [9],
        [],
        [10],
        [],
        [11],
        [],
        [12],
        [],
        [13],
        [],
        [14],
        [],
        [15],
        [],
        [16],
        [],
        [17],
        [],
        [18],
        [],
        [19],
        [],
        [20],
        [],
        [21],
        [],
        [22],
        [],
        [23],
        [],
        [24],
        [],
        [25],
        [],
        [26],
        [],
        [27],
        [],
        [28],
        [],
        [29],
        [],
        [30],
        [],
        [31],
        [],
        [32],
        [],
        [33],
        [],
        [34],
        [],
        [35],
        [],
        [36],
        [],
        [37],
        [],
        [38],
        [],
        [39],
        [],
        [40],
        [],
        [41],
        [],
        [42],
        [],
        [43],
        [],
        [44],
        [],
        [45],
        [],
        [46],
        [],
        [47],
        [],
        [48],
        [],
        [49],
        [],
        [50],
        [],
        [51],
        [],
        [52],
        [],
        [53],
        [],
        [54],
        [],
        [55],
        [],
        [56],
        [],
        [57],
        [],
        [58],
        [],
        [59],
        [],
        [60],
        [],
        [61],
        [],
        [62],
        [],
        [63],
        [],
        [64],
        [],
        [65],
        [],
        [66],
        [],
        [67],
        [],
        [68],
        [],
        [69],
        [],
        [70],
        [],
        [71],
        [],
        [72],
        [],
        [73],
        [],
        [74],
        [],
        [75],
        [],
        [76],
        [],
        [77],
        [],
        [78],
        [],
        [79],
        [],
        [80],
        [],
        [81],
        [],
        [82],
        [],
        [83],
        [],
        [84],
        [],
        [85],
        [],
        [86],
        [],
        [87],
        [],
        [88],
        [],
        [89],
        [],
        [90],
        [],
        [91],
        [],
        [92],
        [],
        [93],
        [],
        [94],
        [],
        [95],
        [],
        [96],
        [],
        [97],
        [],
        [98],
        [],
        [99],
        [],
        [100],
        [],
        [101],
        [],
        [102],
        [],
        [103],
        [],
        [104],
        [],
        [105],
        [],
        [106],
        [],
        [107],
        [],
        [108],
        [],
        [109],
        [],
        [110],
        [],
        [111],
        [],
        [112],
        [],
        [113],
        [],
        [114],
        [],
        [115],
        [],
        [116],
        [],
        [117],
        [],
        [118],
        [],
        [119],
        [],
        [120],
        [],
        [121],
        [],
        [122],
        [],
        [123],
        [],
        [124],
        [],
        [125],
        [],
        [126],
        [],
        [127],
        [],
        [128],
        [],
        [129],
        [],
        [130],
        [],
        [131],
        [],
        [132],
        [],
        [133],
        [],
        [134],
        [],
        [135],
        [],
        [136],
        [],
        [137],
        [],
        [138],
        [],
        [139],
        [],
        [140],
        [],
        [141],
        [],
        [142],
        [],
        [143],
        [],
        [144],
        [],
        [145],
        [],
        [146],
        [],
        [147],
        [],
        [148],
        [],
        [149],
        [],
        [150],
        [],
        [151],
        [],
        [152],
        [],
        [153],
        [
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
            186,
            187,
            188,
            189,
            190,
            191,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240,
            241,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            251,
            252,
            253,
            254,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            263,
            264,
            265,
            266,
            267,
            268,
            269,
            270,
            271,
            272,
            273,
            274,
            275,
            276,
            277,
            278,
            279,
            280,
            281,
            282,
            283,
            284,
            285,
            286,
            287,
            288,
            289,
            290,
            291,
            292,
            293,
            294,
            295,
            296,
            297,
            298,
            299,
            300,
            301,
            302,
            303,
            304,
            305,
            306,
            307,
            308,
            309,
            310,
            311,
            312,
            313,
            314,
            315,
            316,
            317,
            318,
            319,
            320,
            321,
            322,
            323,
            324,
            325,
            326,
            327,
            328,
            329,
            330,
            331,
            332,
            333,
            334,
            335,
            336,
        ],
    ],
    [
        [0],
        [1],
        [2],
        [3],
        [4],
        [5],
        [6],
        [],
        [7],
        [8],
        [9],
        [10],
        [11],
        [12],
        [13],
        [],
        [14],
        [15],
        [],
        [16],
        [],
        [17],
        [],
        [18],
        [],
        [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33],
        [34],
        [],
        [35],
        [],
        [36],
        [],
        [37],
        [38],
        [],
        [39],
        [40],
        [41],
        [42],
        [43],
        [44],
        [],
        [45],
        [46],
        [47],
        [48],
        [49],
        [50],
        [51],
        [52],
        [53],
        [54],
        [55],
        [56],
        [],
        [57],
        [58],
        [59],
        [60],
        [61],
        [62],
        [63],
        [64],
        [],
        [65],
        [66],
        [67],
        [],
        [68],
        [],
        [69],
        [],
        [70],
        [71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84],
        [85],
        [],
        [86],
        [],
        [87],
        [],
        [88],
        [89],
        [],
        [90],
        [91],
        [92],
        [93],
        [94],
        [],
        [95],
        [96],
        [97],
        [98],
        [99],
        [100],
        [101],
        [102],
        [103],
        [104],
        [105],
        [106],
        [],
        [107],
        [108],
        [109],
        [110],
        [111],
        [112],
        [113],
        [114],
        [115],
        [],
        [116],
        [117],
        [118],
        [],
        [119],
        [],
        [120],
        [],
        [121],
        [],
        [
            122,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
        ],
        [137],
        [],
        [138],
        [],
        [139],
        [],
        [140],
        [141],
        [],
        [142],
        [143],
        [144],
        [145],
        [],
        [146],
        [147],
        [148],
        [149],
        [150],
        [151],
        [152],
        [153],
        [154],
        [155, 156],
        [],
        [157],
        [],
        [158],
        [159],
        [160],
        [161],
        [162],
        [163],
        [164],
        [165],
        [166],
        [],
        [167],
        [168],
        [169],
        [],
        [170],
        [171],
        [],
        [172],
        [],
        [173],
        [],
        [
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
            186,
            187,
            188,
        ],
        [],
        [189],
        [],
        [190],
        [],
        [191],
        [192],
        [],
        [193],
        [194],
        [195],
        [196],
        [],
        [197],
        [198],
        [199],
        [200],
        [201],
        [202],
        [203],
        [204],
        [205],
        [206],
        [],
        [207],
        [208],
        [209],
        [210],
        [211],
        [212],
        [213],
        [214],
        [215],
        [216],
        [217],
        [],
        [218],
        [219],
        [220],
        [221],
        [],
        [222],
        [223],
        [],
        [224],
        [],
        [225],
        [],
        [
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240,
        ],
        [],
        [241],
        [],
        [242],
        [],
        [243],
        [244],
        [],
        [245],
        [246],
        [247],
        [],
        [248],
        [249],
        [250],
        [251],
        [252],
        [253],
        [254],
        [255],
        [256],
        [],
        [257],
        [],
        [258, 259],
        [260],
        [261],
        [262],
        [263],
        [264],
        [265],
        [266],
        [267],
        [268],
        [],
        [269],
        [270],
        [271],
        [272],
        [],
        [273],
        [274],
        [],
        [275],
        [],
        [276],
        [],
        [277],
        [
            278,
            279,
            280,
            281,
            282,
            283,
            284,
            285,
            286,
            287,
            288,
            289,
            290,
            291,
            292,
        ],
        [],
        [293],
        [],
        [294],
        [],
        [295],
        [],
        [296],
        [297],
        [298],
        [],
        [299],
        [300],
        [301],
        [302],
        [303],
        [304],
        [305],
        [306],
        [],
        [307],
        [308],
        [309],
        [310],
        [311],
        [312],
        [313],
        [314],
        [315],
        [316],
        [317],
        [318],
        [],
        [319],
        [],
        [320],
        [321, 322, 323],
        [324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336],
    ],
]

index_cl_pts_prev_centerline_expected: list[list[int]] = [
    [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        13,
        15,
        16,
        18,
        20,
        22,
        23,
        23,
        23,
        23,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        25,
        27,
        29,
        31,
        32,
        34,
        35,
        36,
        38,
        39,
        40,
        41,
        42,
        44,
        45,
        46,
        47,
        48,
        49,
        51,
        52,
        53,
        54,
        55,
        57,
        58,
        59,
        61,
        62,
        64,
        66,
        68,
        70,
        70,
        70,
        70,
        70,
        70,
        70,
        71,
        71,
        71,
        71,
        71,
        71,
        71,
        71,
        71,
        71,
        72,
        74,
        76,
        78,
        80,
        81,
        82,
        84,
        85,
        86,
        87,
        88,
        90,
        91,
        92,
        93,
        94,
        95,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        108,
        109,
        111,
        113,
        115,
        117,
        117,
        117,
        117,
        117,
        117,
        117,
        117,
        117,
        118,
        118,
        118,
        118,
        118,
        118,
        118,
        118,
        119,
        121,
        123,
        125,
        127,
        128,
        130,
        131,
        132,
        133,
        134,
        136,
        137,
        138,
        139,
        140,
        141,
        143,
        144,
        145,
        146,
        147,
        149,
        150,
        151,
        152,
        154,
        155,
        156,
        158,
        160,
        162,
        164,
        164,
        164,
        164,
        164,
        164,
        164,
        164,
        164,
        164,
        164,
        165,
        165,
        165,
        165,
        165,
        165,
        167,
        169,
        171,
        172,
        174,
        175,
        177,
        178,
        179,
        180,
        182,
        183,
        184,
        185,
        187,
        189,
        189,
        190,
        191,
        192,
        193,
        195,
        196,
        197,
        198,
        199,
        201,
        202,
        204,
        206,
        208,
        210,
        211,
        211,
        211,
        211,
        211,
        211,
        211,
        211,
        211,
        211,
        211,
        211,
        211,
        212,
        212,
        212,
        212,
        214,
        216,
        218,
        220,
        221,
        223,
        224,
        225,
        226,
        228,
        229,
        230,
        231,
        232,
        234,
        235,
        236,
        237,
        238,
        239,
        241,
        242,
        243,
        244,
        245,
        247,
        248,
        249,
        251,
        253,
        255,
        257,
        258,
        258,
        258,
        258,
        258,
        258,
        258,
        258,
        258,
        258,
        258,
        258,
        258,
        258,
        258,
        259,
        259,
        261,
        263,
        265,
        267,
        268,
        270,
        271,
        272,
        274,
        275,
        276,
        277,
        278,
        278,
        278,
        278,
        278,
        278,
        278,
        278,
        278,
        278,
        278,
        278,
        278,
        278,
        278,
        280,
        282,
    ],
    [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        121,
        122,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        152,
        153,
        154,
        155,
        156,
        157,
        158,
        158,
        159,
        160,
        161,
        162,
        163,
        164,
        165,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        174,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        182,
        183,
        184,
        185,
        186,
        187,
        188,
        189,
        190,
        191,
        192,
        193,
        194,
        195,
        196,
        197,
        198,
        198,
        199,
        200,
        201,
        202,
        203,
        204,
        204,
        205,
        206,
        207,
        208,
        209,
        210,
        210,
        211,
        212,
        213,
        214,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        222,
        223,
        224,
        225,
        226,
        227,
        228,
        229,
        230,
        231,
        232,
        233,
        234,
        235,
        236,
        237,
        238,
        239,
        240,
        241,
        242,
        243,
        244,
        245,
        245,
        246,
        247,
        248,
        249,
        250,
        250,
        251,
        252,
        253,
        254,
        255,
        255,
        256,
        257,
        258,
        259,
        260,
        261,
        262,
        263,
        263,
        264,
        265,
        266,
        267,
        269,
        270,
        271,
        272,
        273,
        274,
        275,
        276,
        277,
        278,
        279,
        280,
        281,
        282,
        283,
        284,
        284,
        284,
        284,
        284,
    ],
    [
        0,
        2,
        4,
        6,
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26,
        28,
        30,
        32,
        34,
        36,
        38,
        40,
        42,
        44,
        46,
        48,
        50,
        52,
        54,
        56,
        58,
        60,
        62,
        64,
        66,
        68,
        70,
        72,
        74,
        76,
        78,
        80,
        82,
        84,
        86,
        88,
        90,
        92,
        94,
        96,
        98,
        100,
        102,
        104,
        106,
        108,
        110,
        112,
        114,
        116,
        118,
        120,
        122,
        124,
        126,
        128,
        130,
        132,
        134,
        136,
        138,
        140,
        142,
        144,
        146,
        148,
        150,
        152,
        154,
        156,
        158,
        160,
        162,
        164,
        166,
        168,
        170,
        172,
        174,
        176,
        178,
        180,
        182,
        184,
        186,
        188,
        190,
        192,
        194,
        196,
        198,
        200,
        202,
        204,
        206,
        208,
        210,
        212,
        214,
        216,
        218,
        220,
        222,
        224,
        226,
        228,
        230,
        232,
        234,
        236,
        238,
        240,
        242,
        244,
        246,
        248,
        250,
        252,
        254,
        256,
        258,
        260,
        262,
        264,
        266,
        268,
        270,
        272,
        274,
        276,
        278,
        280,
        282,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
        284,
    ],
    [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        13,
        15,
        16,
        18,
        20,
        22,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        25,
        27,
        29,
        31,
        32,
        34,
        35,
        36,
        38,
        39,
        40,
        41,
        42,
        44,
        45,
        46,
        47,
        48,
        49,
        51,
        52,
        53,
        54,
        55,
        57,
        58,
        59,
        61,
        62,
        64,
        66,
        68,
        70,
        71,
        71,
        71,
        71,
        71,
        71,
        71,
        71,
        71,
        71,
        71,
        71,
        71,
        71,
        71,
        71,
        72,
        74,
        76,
        78,
        79,
        81,
        82,
        84,
        85,
        86,
        87,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        108,
        109,
        111,
        113,
        115,
        117,
        118,
        118,
        118,
        118,
        118,
        118,
        118,
        118,
        118,
        118,
        118,
        118,
        118,
        118,
        118,
        118,
        119,
        121,
        123,
        125,
        127,
        128,
        130,
        131,
        132,
        133,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        143,
        144,
        145,
        146,
        147,
        149,
        150,
        151,
        152,
        154,
        155,
        156,
        158,
        160,
        162,
        164,
        165,
        165,
        165,
        165,
        165,
        165,
        165,
        165,
        165,
        165,
        165,
        165,
        165,
        165,
        165,
        165,
        167,
        169,
        171,
        172,
        174,
        175,
        177,
        178,
        179,
        180,
        182,
        183,
        184,
        185,
        187,
        189,
        189,
        190,
        191,
        192,
        193,
        195,
        196,
        197,
        198,
        199,
        201,
        202,
        204,
        206,
        208,
        210,
        212,
        212,
        212,
        212,
        212,
        212,
        212,
        212,
        212,
        212,
        212,
        212,
        212,
        212,
        212,
        212,
        212,
        214,
        216,
        218,
        220,
        221,
        223,
        224,
        225,
        226,
        228,
        229,
        230,
        231,
        232,
        234,
        235,
        236,
        237,
        238,
        239,
        241,
        242,
        243,
        244,
        245,
        247,
        248,
        249,
        251,
        253,
        255,
        257,
        259,
        259,
        259,
        259,
        259,
        259,
        259,
        259,
        259,
        259,
        259,
        259,
        259,
        259,
        259,
        259,
        259,
        261,
        263,
        265,
        267,
        268,
        270,
        271,
        272,
        274,
        275,
        276,
        277,
        278,
        278,
        278,
        278,
        278,
        278,
        278,
        278,
        278,
        278,
        278,
        278,
        278,
        278,
        278,
        280,
        282,
    ],
]
nb_bend_evols_exp = 7
nb_bend_evols_valid_exp = 6
middle_trajec_expected = [
    [
        [44.8275, 0.1189],
        [43.5321, 0.287],
        [42.2291, 0.3636],
        [40.9209, 0.3781],
        [39.6094, 0.3595],
        [38.297, 0.3371],
        [36.9858, 0.3401],
    ],
    [
        [133.9801, 0.1961],
        [130.1285, 0.3088],
        [126.2652, 0.399],
        [122.3944, 0.4791],
        [118.5208, 0.5611],
        [114.6488, 0.6575],
        [110.7828, 0.7804],
    ],
    [
        [223.2938, 0.1804],
        [216.7819, 0.1192],
        [210.2784, 0.1984],
        [203.7808, 0.3812],
        [197.2863, 0.6311],
        [190.7923, 0.9113],
        [184.2961, 1.1853],
    ],
    [
        [312.6054, 0.0797],
        [303.473, 0.1999],
        [294.3402, 0.3324],
        [285.2069, 0.4662],
        [276.0733, 0.5902],
        [266.9392, 0.6931],
        [257.8047, 0.7639],
    ],
    [
        [401.9237, 0.0596],
        [390.2027, 0.4284],
        [378.4928, 0.6064],
        [366.7887, 0.6298],
        [355.0854, 0.5345],
        [343.3776, 0.3568],
        [331.6604, 0.1324],
    ],
    [
        [473.263, -2.4229],
        [462.2816, -2.3737],
        [451.2469, 0.765],
        [439.7617, 0.786],
        [428.164, -0.2075],
        [416.7825, 0.117],
        [405.1743, -0.1659],
    ],
]


centroid_trajec_expected = [
    [
        [44.8721, 2.0589],
        [43.8152, 4.4567],
        [42.5763, 6.7555],
        [41.215, 8.9881],
        [39.7905, 11.1874],
        [38.3625, 13.3864],
        [36.9902, 15.6179],
    ],
    [
        [134.0948, -1.9246],
        [130.4491, -4.4107],
        [126.6093, -6.5796],
        [122.6517, -8.5576],
        [118.6526, -10.471],
        [114.6883, -12.4461],
        [110.8351, -14.6092],
    ],
    [
        [223.463, 2.2401],
        [217.1411, 4.9657],
        [210.6399, 7.3134],
        [204.0336, 9.4437],
        [197.3962, 11.5172],
        [190.8018, 13.6946],
        [184.3246, 16.1362],
    ],
    [
        [312.722, -1.9719],
        [303.7138, -4.624],
        [294.5773, -6.8009],
        [285.3639, -8.6952],
        [276.1252, -10.4994],
        [266.9126, -12.406],
        [257.7775, -14.6075],
    ],
    [
        [402.0245, 2.1096],
        [390.4546, 5.0665],
        [378.7703, 7.4875],
        [367.0111, 9.558],
        [355.2167, 11.4639],
        [343.4268, 13.3907],
        [331.681, 15.524],
    ],
    [
        [474.5751, -3.288],
        [463.7621, -7.2412],
        [452.008, -8.2898],
        [440.2448, -9.6888],
        [428.5286, -11.4659],
        [416.841, -13.374],
        [405.1637, -15.1661],
    ],
]

apex_trajec_expected = [
    [
        [45.6588, 5.0714],
        [44.3394, 10.4667],
        [43.1103, 15.8633],
        [41.8172, 21.2312],
        [40.3425, 26.5498],
        [38.6461, 31.8194],
        [36.6975, 37.043],
    ],
    [
        [134.9386, -4.8728],
        [131.4886, -10.518],
        [127.7121, -15.926],
        [123.4149, -20.8728],
        [119.0916, -25.7495],
        [115.1852, -30.9778],
        [111.0905, -36.1638],
    ],
    [
        [224.1955, 4.9642],
        [218.2927, 11.4179],
        [211.7453, 17.0809],
        [204.7624, 22.2142],
        [197.5529, 27.0788],
        [190.3259, 31.9359],
        [183.2902, 37.0466],
    ],
    [
        [313.7201, -5.0462],
        [305.215, -11.5367],
        [296.0383, -17.0036],
        [286.4393, -21.8252],
        [276.6668, -26.3797],
        [266.9701, -31.0453],
        [257.598, -36.2003],
    ],
    [
        [403.0195, 5.2484],
        [391.7331, 11.6627],
        [380.0361, 17.3162],
        [368.0627, 22.4487],
        [355.9471, 27.2998],
        [343.8235, 32.1089],
        [331.8261, 37.1157],
    ],
    [
        [486.4181, -5.07],
        [474.3674, -12.7211],
        [461.0233, -18.1165],
        [447.2642, -22.6835],
        [433.4678, -27.0815],
        [419.7147, -31.5136],
        [406.0821, -36.177],
    ],
]


class TestsCenterlineCollection(unittest.TestCase):
    @unittest.skip("")
    def test_create_centerline_collection_from_flumy_dataset_monoproc(
        self: Self,
    ) -> None:
        """Test of initialisation from csv file using single processing."""
        map_dataset = load_centerline_collection_dataset_from_Flumy_csv(
            filepath_cl_collection, sep=";"
        )
        if map_dataset is None:
            self.skipTest(
                "Imported data is null. Check pybend_io tests for centerline "
                + " collect loading."
            )

        centerline_collec = None
        try:
            centerline_collec = CenterlineCollection(
                map_dataset,
                spacing,
                smooth_distance,
                use_fix_nb_points,
                filtering_window,
                sinuo_thres,
                compute_curvature,
                interpol_props,
                find_bends,
            )
        except Exception as err:
            print(err)
            self.fail("CenterlineCollection creation failed.")

        self.assertTrue(centerline_collec is not None)
        self.assertEqual(
            len(centerline_collec.centerlines),
            nb_centerlines_out,
            "CenterlineCollection intialization: centerlines are missing.",
        )
        self.assertTrue(
            np.array_equal(ages_out, centerline_collec.get_all_ages()),
            "CenterlineCollection intialization: some ages are missing.",
        )

    @unittest.skip("")
    def test_create_centerline_collection_from_flumy_dataset_multiproc(
        self: Self,
    ) -> None:
        """Test of initialisation from Flumy dataset using single proc."""
        set_nb_procs(nb_procs)
        map_dataset = load_centerline_collection_dataset_from_Flumy_csv(
            filepath_cl_collection, sep=";"
        )
        if map_dataset is None:
            self.skipTest(
                "Imported data is null. Check pybend_io tests for centerline "
                + " collect loading."
            )

        centerline_collec = None
        try:
            centerline_collec = CenterlineCollection(
                map_dataset,
                spacing,
                smooth_distance,
                use_fix_nb_points,
                filtering_window,
                sinuo_thres,
                compute_curvature,
                interpol_props,
                find_bends,
            )
        except Exception as err:
            print(err)
            self.fail("CenterlineCollection creation failed.")

        self.assertTrue(centerline_collec is not None)
        self.assertEqual(
            len(centerline_collec.centerlines),
            nb_centerlines_out,
            "CenterlineCollection intialization: centerlines are missing.",
        )
        self.assertTrue(
            np.array_equal(ages_out, centerline_collec.get_all_ages()),
            "CenterlineCollection intialization: some ages are missing.",
        )
        set_nb_procs(1)

    @unittest.skip("")
    def test_create_properties(self: Self) -> None:
        """Test of adding properties to CenterlineCollection."""
        map_dataset = load_centerline_collection_dataset_from_Flumy_csv(
            filepath_cl_collection, sep=";"
        )
        centerline_collec = CenterlineCollection(
            map_dataset,
            spacing,
            smooth_distance,
            use_fix_nb_points,
            filtering_window,
            sinuo_thres,
            compute_curvature,
            interpol_props,
            find_bends,
        )
        if centerline_collec is None:
            self.skipTest("CenterlineCollection is null.")

        try:
            for age, prop in property_map.items():
                centerline_collec.set_centerline_constant_properties(age, prop)
        except Exception as err:
            print(err)
            self.fail("Enable to set centerline properties.")

        for age in ages_out:
            values: npt.NDArray[np.float64]
            if age in property_map:
                for name, val in property_map[age].items():
                    try:
                        values = centerline_collec.get_centerline_property(
                            age, name
                        )
                    except Exception as err:
                        print(err)
                        self.fail(
                            "Enable to get centerline property when it exists."
                        )
                    self.assertEqual(
                        values.size,
                        centerline_collec.centerlines[age].get_nb_points(),
                        "Centerline property was not correctly set or get.",
                    )
                    self.assertEqual(
                        np.unique(values).size,
                        1,
                        "Centerline property was not correctly set or get.",
                    )
                    self.assertEqual(
                        np.unique(values)[0],
                        val,
                        "Centerline property was not correctly set or get.",
                    )
            else:
                try:
                    values = centerline_collec.get_centerline_property(
                        age, "Dummy_name"
                    )
                except Exception as err:
                    print(err)
                    self.fail(
                        "Error in centerline property getter when it does "
                        + "not exist."
                    )
                self.assertEqual(
                    values.size,
                    centerline_collec.centerlines[age].get_nb_points(),
                    "Centerline property was not correctly set or get.",
                )
                self.assertEqual(
                    np.unique(values).size,
                    1,
                    "Centerline property was not correctly set or get.",
                )
                self.assertTrue(
                    np.isnan(np.unique(values)[0]),
                    "Centerline property was not correctly set or get.",
                )

    # @unittest.skip("")
    def test_centerlines_matching_monoproc(self: Self) -> None:
        """Test of match_centerlines function using single processing."""
        map_dataset = load_centerline_collection_dataset_from_Flumy_csv(
            filepath_cl_collection, sep=";"
        )
        centerline_collec = CenterlineCollection(
            map_dataset,
            spacing,
            smooth_distance,
            use_fix_nb_points,
            filtering_window,
            sinuo_thres,
            compute_curvature,
            interpol_props,
            find_bends,
        )
        if centerline_collec is None:
            self.skipTest("CenterlineCollection is null.")

        for i, weights in enumerate(dtw_weights):
            try:
                centerline_collec.match_centerlines(
                    dmax,
                    weights[0],
                    weights[1],
                    weights[2],
                    filtering_window,
                    pattern,
                )
            except Exception as err:
                print(err)
                self.fail("match centerline: Unable to match centerlines.")

            index_cl_pts_prev_centerline: list[int] = (
                centerline_collec.centerlines[50].index_cl_pts_prev_centerline
            )
            self.assertSequenceEqual(
                index_cl_pts_prev_centerline_expected[i],
                index_cl_pts_prev_centerline[:-1],
                f"Matching: index_cl_pts_prev_centerline at weight index {i}",
            )

            index_cl_pts_next_centerline: list[list[int]] = (
                centerline_collec.centerlines[50].index_cl_pts_next_centerline
            )
            for l_indexes, l_indexes_expected in zip(
                index_cl_pts_next_centerline,
                index_cl_pts_next_centerline_expected[i],
                strict=False,
            ):
                self.assertSequenceEqual(
                    l_indexes,
                    l_indexes_expected,
                    (
                        "Centerline matching: index_cl_pts_next_centerline at "
                        + "weight index {i}"
                    ),
                )

    @unittest.skip("")
    def test_centerlines_matching_multiproc(self: Self) -> None:
        """Test of match_centerlines function using multi-processing."""
        set_nb_procs(nb_procs)
        map_dataset = load_centerline_collection_dataset_from_Flumy_csv(
            filepath_cl_collection, sep=";"
        )
        centerline_collec = CenterlineCollection(
            map_dataset,
            spacing,
            smooth_distance,
            use_fix_nb_points,
            filtering_window,
            sinuo_thres,
            compute_curvature,
            interpol_props,
            find_bends,
        )
        if centerline_collec is None:
            self.skipTest("CenterlineCollection is null.")

        for i, weights in enumerate(dtw_weights):
            try:
                centerline_collec.match_centerlines(
                    dmax,
                    weights[0],
                    weights[1],
                    weights[2],
                    filtering_window,
                    pattern,
                )
            except Exception as err:
                print(err)
                self.fail("Unable to match centerlines.")

            index_cl_pts_prev_centerline: list[int] = (
                centerline_collec.centerlines[50].index_cl_pts_prev_centerline
            )
            print("Prev ctl, ", i)
            print(index_cl_pts_prev_centerline)
            self.assertSequenceEqual(
                index_cl_pts_prev_centerline[:-1],
                index_cl_pts_prev_centerline_expected[i],
                f"index_cl_pts_prev_centerline at weight index {i}",
            )

            index_cl_pts_next_centerline: list[list[int]] = (
                centerline_collec.centerlines[50].index_cl_pts_next_centerline
            )
            print("Next ctl, ", i)
            print(index_cl_pts_next_centerline)
            for l_indexes, l_indexes_expected in zip(
                index_cl_pts_next_centerline,
                index_cl_pts_next_centerline_expected[i],
                strict=False,
            ):
                self.assertSequenceEqual(
                    l_indexes,
                    l_indexes_expected,
                    f"Index_cl_pts_next_centerline at weight index {i}",
                )
        set_nb_procs(1)

    @unittest.skip("")
    def test_bend_connection(self: Self) -> None:
        """Test of connect_bends function using single processing."""
        map_dataset = load_centerline_collection_dataset_from_Flumy_csv(
            filepath_cl_collection, sep=";"
        )
        centerline_collec = CenterlineCollection(
            map_dataset,
            spacing,
            smooth_distance,
            use_fix_nb_points,
            filtering_window,
            sinuo_thres,
            compute_curvature,
            interpol_props,
            find_bends,
        )

        if centerline_collec is None:
            self.skipTest("CenterlineCollection is null.")

        try:
            centerline_collec.connect_bends(
                bend_evol_validity=6, method=BendConnectionMethod.APEX
            )
        except Exception as err:
            print(err)
            self.fail("bend connection: Unable to connect bends.")

        self.assertEqual(
            centerline_collec.get_nb_bends_evol(),
            nb_bend_evols_exp,
            "CenterlineCollection bend connection: Number of "
            + f"bend evolution must be {nb_bend_evols_exp}.",
        )
        self.assertEqual(
            centerline_collec.get_nb_valid_bends_evol(),
            nb_bend_evols_valid_exp,
            "CenterlineCollection bend connection: Number of "
            + f"valid bend evolution must be {nb_bend_evols_valid_exp}.",
        )

        for i, bend_evol in enumerate(centerline_collec.bends_evol):
            fig, ax = plt.subplots(figsize=(5, 5), dpi=150)
            plot.plot_bend_evol(
                ax,
                (centerline_collec,),
                bend_evol,
                plot_apex=False,
                plot_middle=False,
                plot_apex_trajec=False,
                plot_middle_trajec=False,
                plot_warping=True,
            )

            plt.axis("equal")
            plt.tight_layout()
            plt.savefig(fig_path + f"test_bend_connection_{i}.png", dpi=150)
            plt.close()

    @unittest.skip("")
    def test_compute_all_bend_middle_monoproc(self: Self) -> None:
        """Test of find_all_bend_middle function using single processing."""
        map_dataset = load_centerline_collection_dataset_from_Flumy_csv(
            filepath_cl_collection, sep=";"
        )
        centerline_collec = CenterlineCollection(
            map_dataset,
            spacing,
            smooth_distance,
            use_fix_nb_points,
            filtering_window,
            sinuo_thres,
            compute_curvature,
            interpol_props,
            find_bends,
        )

        if centerline_collec is None:
            self.skipTest("CenterlineCollection is null.")

        try:
            centerline_collec.connect_bends(
                bend_evol_validity=6, method=BendConnectionMethod.APEX
            )
        except Exception:
            self.skipTest("Centerline matching or bend tracking failed.")

        centerline_collec.find_all_bend_middle(True)
        trajec_all: npt.NDArray[np.float64] = np.round(
            [
                bend_evol.middle_trajec_smooth
                for bend_evol in centerline_collec.bends_evol
                if bend_evol.isvalid
            ],
            4,
        )
        print(trajec_all)

        self.assertEqual(len(trajec_all), len(middle_trajec_expected))
        self.assertSequenceEqual(trajec_all.tolist(), middle_trajec_expected)

        for i, bend_evol in enumerate(centerline_collec.bends_evol):
            _, ax = plt.subplots(figsize=(5, 5), dpi=150)
            plot.plot_bend_evol(
                ax,
                (centerline_collec,),
                bend_evol,
                plot_apex=False,
                plot_middle=True,
                plot_apex_trajec=False,
                plot_middle_trajec=True,
                plot_warping=False,
            )

            plt.axis("equal")
            plt.tight_layout()
            plt.savefig(fig_path + f"test_middles_{i}.png", dpi=150)
            plt.close()

    @unittest.skip("")
    def test_compute_all_bend_middle_multiprocs(self: Self) -> None:
        """Test of find_all_bend_middle function using multi-processing."""
        set_nb_procs(nb_procs)
        map_dataset = load_centerline_collection_dataset_from_Flumy_csv(
            filepath_cl_collection, sep=";"
        )
        centerline_collec = CenterlineCollection(
            map_dataset,
            spacing,
            smooth_distance,
            use_fix_nb_points,
            filtering_window,
            sinuo_thres,
            compute_curvature,
            interpol_props,
            find_bends,
        )

        if centerline_collec is None:
            self.skipTest("CenterlineCollection is null.")

        try:
            centerline_collec.connect_bends(
                bend_evol_validity=6, method=BendConnectionMethod.APEX
            )
        except Exception:
            self.skipTest("Centerline matching or bend tracking failed.")

        centerline_collec.find_all_bend_middle(True)
        trajec_all: npt.NDArray[np.float64] = np.round(
            [
                bend_evol.middle_trajec_smooth
                for bend_evol in centerline_collec.bends_evol
                if bend_evol.isvalid
            ],
            4,
        )

        self.assertEqual(len(middle_trajec_expected), len(trajec_all))
        self.assertSequenceEqual(trajec_all.tolist(), middle_trajec_expected)
        set_nb_procs(1)

    @unittest.skip("")
    def test_compute_all_bend_centroid_monoproc(self: Self) -> None:
        """Test of find_all_bend_centroid function using single processing."""
        map_dataset = load_centerline_collection_dataset_from_Flumy_csv(
            filepath_cl_collection, sep=";"
        )
        centerline_collec = CenterlineCollection(
            map_dataset,
            spacing,
            smooth_distance,
            use_fix_nb_points,
            filtering_window,
            sinuo_thres,
            compute_curvature,
            interpol_props,
            find_bends,
        )

        if centerline_collec is None:
            self.skipTest("CenterlineCollection is null.")

        try:
            centerline_collec.connect_bends(
                bend_evol_validity=6, method=BendConnectionMethod.APEX
            )
        except Exception:
            self.skipTest("Centerline matching or bend tracking failed.")

        centerline_collec.find_all_bend_centroid(True)
        trajec_all: npt.NDArray[np.float64] = np.round(
            [
                bend_evol.centroid_trajec_smooth
                for bend_evol in centerline_collec.bends_evol
                if bend_evol.isvalid
            ],
            4,
        )

        self.assertEqual(len(centroid_trajec_expected), len(trajec_all))
        self.assertSequenceEqual(trajec_all.tolist(), centroid_trajec_expected)

        for i, bend_evol in enumerate(centerline_collec.bends_evol):
            _, ax = plt.subplots(figsize=(5, 5), dpi=150)
            plot.plot_bend_evol(
                ax,
                (centerline_collec,),
                bend_evol,
                plot_apex=False,
                plot_middle=False,
                plot_centroid=True,
                plot_apex_trajec=False,
                plot_middle_trajec=False,
                plot_centroid_trajec=True,
                plot_warping=False,
            )

            plt.axis("equal")
            plt.tight_layout()
            plt.savefig(fig_path + f"test_centroids_{i}.png", dpi=150)
            plt.close()

    @unittest.skip("")
    def test_compute_all_bend_centroid_multiprocs(self: Self) -> None:
        """Test of find_all_bend_centroid function using multi-processing."""
        set_nb_procs(nb_procs)
        map_dataset = load_centerline_collection_dataset_from_Flumy_csv(
            filepath_cl_collection, sep=";"
        )
        centerline_collec = CenterlineCollection(
            map_dataset,
            spacing,
            smooth_distance,
            use_fix_nb_points,
            filtering_window,
            sinuo_thres,
            compute_curvature,
            interpol_props,
            find_bends,
        )

        if centerline_collec is None:
            self.skipTest("CenterlineCollection is null.")
        try:
            centerline_collec.connect_bends(
                bend_evol_validity=6, method=BendConnectionMethod.APEX
            )
        except Exception:
            self.skipTest("Centerline matching or bend tracking failed.")

        centerline_collec.find_all_bend_centroid(True)
        trajec_all: npt.NDArray[np.float64] = np.round(
            [
                bend_evol.centroid_trajec_smooth
                for bend_evol in centerline_collec.bends_evol
                if bend_evol.isvalid
            ],
            4,
        )

        self.assertEqual(len(centroid_trajec_expected), len(trajec_all))
        self.assertSequenceEqual(trajec_all.tolist(), centroid_trajec_expected)
        set_nb_procs(1)

    @unittest.skip("")
    def test_find_all_bend_apex_monoproc(self: Self) -> None:
        """Test of find_all_bend_apex function using single processing."""
        map_dataset = load_centerline_collection_dataset_from_Flumy_csv(
            filepath_cl_collection, sep=";"
        )
        centerline_collec = CenterlineCollection(
            map_dataset,
            spacing,
            smooth_distance,
            use_fix_nb_points,
            filtering_window,
            sinuo_thres,
            compute_curvature,
            interpol_props,
            find_bends,
        )
        if centerline_collec is None:
            self.skipTest("CenterlineCollection is null.")
        try:
            centerline_collec.connect_bends(
                bend_evol_validity=6, method=BendConnectionMethod.APEX
            )
        except Exception:
            self.skipTest("Centerline matching or bend tracking failed.")

        centerline_collec.find_all_bend_apex(n, True)
        trajec_all: npt.NDArray[np.float64] = np.round(
            [
                bend_evol.apex_trajec_smooth
                for bend_evol in centerline_collec.bends_evol
                if bend_evol.isvalid
            ],
            4,
        )

        self.assertEqual(len(apex_trajec_expected), len(trajec_all))
        self.assertSequenceEqual(trajec_all.tolist(), apex_trajec_expected)

        for i, bend_evol in enumerate(centerline_collec.bends_evol):
            _, ax = plt.subplots(figsize=(5, 5), dpi=150)
            plot.plot_bend_evol(
                ax,
                (centerline_collec,),
                bend_evol,
                plot_apex=True,
                plot_middle=False,
                plot_centroid=False,
                plot_apex_trajec=True,
                plot_middle_trajec=False,
                plot_centroid_trajec=False,
                plot_warping=False,
            )

            plt.axis("equal")
            plt.tight_layout()
            plt.savefig(fig_path + f"test_apexes_{i}.png", dpi=150)
            plt.close()

    @unittest.skip("")
    def test_find_all_bend_apex_multiproc(self: Self) -> None:
        """Test of find_all_bend_apex function using multi-processing."""
        set_nb_procs(nb_procs)
        map_dataset = load_centerline_collection_dataset_from_Flumy_csv(
            filepath_cl_collection, sep=";"
        )
        centerline_collec = CenterlineCollection(
            map_dataset,
            spacing,
            smooth_distance,
            use_fix_nb_points,
            filtering_window,
            sinuo_thres,
            compute_curvature,
            interpol_props,
            find_bends,
        )
        if centerline_collec is None:
            self.skipTest("CenterlineCollection is null.")
        try:
            centerline_collec.connect_bends(
                bend_evol_validity=6, method=BendConnectionMethod.APEX
            )
        except Exception:
            self.skipTest("Centerline matching or bend tracking failed.")

        centerline_collec.find_all_bend_apex(n, True)
        trajec_all: npt.NDArray[np.float64] = np.round(
            [
                bend_evol.apex_trajec_smooth
                for bend_evol in centerline_collec.bends_evol
                if bend_evol.isvalid
            ],
            4,
        )
        print(trajec_all.tolist())
        self.assertEqual(len(apex_trajec_expected), len(trajec_all))
        self.assertSequenceEqual(trajec_all.tolist(), apex_trajec_expected)

        set_nb_procs(1)

    @unittest.skip("")
    def test_set_section_lines(self: Self) -> None:
        """Test of CenterlineCollection.set_section_lines function."""
        map_dataset = load_centerline_collection_dataset_from_Flumy_csv(
            filepath_cl_collection, sep=";"
        )
        centerline_collec = CenterlineCollection(
            map_dataset,
            spacing,
            smooth_distance,
            use_fix_nb_points,
            filtering_window,
            sinuo_thres,
            compute_curvature,
            interpol_props,
            find_bends,
        )
        if centerline_collec is None:
            self.skipTest("CenterlineCollection is null.")

        try:
            centerline_collec.connect_bends(
                bend_evol_validity=6, method=BendConnectionMethod.APEX
            )
        except Exception:
            self.skipTest("Centerline matching or bend tracking failed.")

        try:
            centerline_collec.set_section_lines(
                section_pts_start, section_pts_end
            )
        except Exception as err:
            print(err)
            self.fail("Unable to set section lines.")

        self.assertEqual(len(centerline_collec.section_lines), 6)
        for pt_start, pt_end, line in zip(
            section_pts_start,
            section_pts_end,
            centerline_collec.section_lines,
            strict=False,
        ):
            coords = np.array(line.coords)
            self.assertEqual(coords.shape[0], 2)
            self.assertEqual(coords.shape[1], 2)
            self.assertAlmostEqual(coords[0][0], pt_start[0])
            self.assertAlmostEqual(coords[0][1], pt_start[1])
            self.assertAlmostEqual(coords[1][0], pt_end[0])
            self.assertAlmostEqual(coords[1][1], pt_end[1])

        # visual QC
        plot.plot_centerline_collection(
            fig_path + "centerline_tests.png",
            centerline_collec,
            ((), ()),  # type: ignore
            show=False,
            annotate=False,
            plot_apex=True,
            plot_inflex=False,
            plot_middle=False,
            plot_centroid=False,
            color_bend=False,
            plot_apex_trajec=False,
            plot_centroid_trajec=False,
            plot_section=True,
        )

    @unittest.skip("To be updated")
    def test_create_section_lines(self: Self) -> None:
        """Test of CenterlineCollection.create_section_lines function."""
        map_dataset = load_centerline_collection_dataset_from_Flumy_csv(
            filepath_cl_collection, sep=";"
        )
        centerline_collec = CenterlineCollection(
            map_dataset,
            spacing,
            smooth_distance,
            use_fix_nb_points,
            filtering_window,
            sinuo_thres,
            compute_curvature,
            interpol_props,
            find_bends,
        )
        if centerline_collec is None:
            self.skipTest("CenterlineCollection is null.")

        # apex
        try:
            centerline_collec.create_section_lines(CreateSectionMethod.APEX)
        except Exception as err:
            print(err)
            self.fail("Unable to create section lines using APEX method.")

        self.assertEqual(len(centerline_collec.section_lines), 5)
        for pt_start, pt_end, line in zip(
            section_apex_pts_start,
            section_apex_pts_end,
            centerline_collec.section_lines,
            strict=False,
        ):
            coords = np.array(line)
            self.assertAlmostEqual(coords[0][0], pt_start[0], 3)
            self.assertAlmostEqual(coords[0][1], pt_start[1], 3)
            self.assertAlmostEqual(coords[1][0], pt_end[0], 3)
            self.assertAlmostEqual(coords[1][1], pt_end[1], 3)

        # middle
        try:
            centerline_collec.create_section_lines(CreateSectionMethod.MIDDLE)
        except Exception as err:
            print(err)
            self.fail("Unable to create section lines using MIDDLE method.")

        self.assertEqual(len(centerline_collec.section_lines), 5)
        for pt_start, pt_end, line in zip(
            section_middle_pts_start,
            section_middle_pts_end,
            centerline_collec.section_lines,
            strict=False,
        ):
            coords = np.array(line)
            self.assertAlmostEqual(coords[0][0], pt_start[0], 3)
            self.assertAlmostEqual(coords[0][1], pt_start[1], 3)
            self.assertAlmostEqual(coords[1][0], pt_end[0], 3)
            self.assertAlmostEqual(coords[1][1], pt_end[1], 3)

        # centroid
        try:
            centerline_collec.find_all_bend_centroid()
        except Exception as err:
            print(err)
            self.skipTest(
                "Error during Centerline centroids computation. "
                + "Run test_compute_all_bend_centroid."
            )

        try:
            centerline_collec.create_section_lines(
                CreateSectionMethod.CENTROID
            )
        except Exception as err:
            print(err)
            self.fail("Unable to create section lines using CENTROID method.")

        self.assertEqual(len(centerline_collec.section_lines), 5)
        for pt_start, pt_end, line in zip(
            section_apex_pts_start,
            section_apex_pts_end,
            centerline_collec.section_lines,
            strict=False,
        ):
            coords = np.array(line)
            self.assertAlmostEqual(coords[0][0], pt_start[0], 3)
            self.assertAlmostEqual(coords[0][1], pt_start[1], 3)
            self.assertAlmostEqual(coords[1][0], pt_end[0], 3)
            self.assertAlmostEqual(coords[1][1], pt_end[1], 3)
            print(
                "(%s, %s), (%s, %s)"
                % (coords[0][0], coords[0][1], coords[1][0], coords[1][1])
            )

    @unittest.skip("To be updated")
    def test_find_points_on_sections(self: Self) -> None:
        """Test of CenterlineCollection.find_points_on_sections function."""
        map_dataset = load_centerline_collection_dataset_from_Flumy_csv(
            filepath_cl_collection, sep=";"
        )
        centerline_collec = CenterlineCollection(
            map_dataset,
            spacing,
            smooth_distance,
            use_fix_nb_points,
            filtering_window,
            sinuo_thres,
            compute_curvature,
            interpol_props,
            find_bends,
        )
        if centerline_collec is None:
            self.skipTest("CenterlineCollection is null.")

        try:
            centerline_collec.find_points_on_sections(1, flow_dir, 0)
        except Exception as err:
            print(err)
            self.fail("Unable to find points on section.")
        self.assertTrue(True)


if __name__ == "__main__":
    unittest.main()
