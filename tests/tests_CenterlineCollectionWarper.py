# SPDX-FileCopyrightText: Copyright 2025 Martin Lemay <martin.lemay@mines-paris.org>
# SPDX-FileContributor: Martin Lemay
# ruff: noqa: E402 # disable Module level import not at top of file

__doc__ = """
Tests functions for Centerline_collection class - Run with input data
centerline_Collection_test_data*.csv.
"""

import os
import unittest
from typing import Self

import matplotlib.pyplot as plt
import numpy as np
import numpy.typing as npt

import pybend.algorithms.plot_functions as plot
from pybend.algorithms.pybend_io import (
    load_centerline_collection_dataset_from_Flumy_csv,
)
from pybend.model.CenterlineCollection import (
    CenterlineCollection,
)
from pybend.model.CenterlineCollectionWarper import (
    CenterlineCollectionWarper,
)
from pybend.utils.globalParameters import set_nb_procs

set_nb_procs(1)

# inputs

# output directory for figures
fig_path: str = "tests/.out/"
# create it if absent
if not os.path.exists(fig_path):
    os.makedirs(fig_path)

filepath_cl_collection: str = "tests/data/centerline_Collection_test_data.csv"

spacing: float = 2  # spacing between channel point (m)
smooth_distance: int = 5  # channel point location smoothing distance (m)
use_fix_nb_points: bool = False
filtering_window: int = 5  # number of points for filtered curvature
sinuo_thres: float = 1.00  # threshold for bends
n: float = 2 # exponent of curvature distribution function
compute_curvature: bool = True
interpol_props: bool = True
find_bends: bool = True

width: float = 30.0
depth: float = 3.0
flow_dir: npt.NDArray[np.float64] = np.array([1.0, 0.0])

# time warping paramters
dmax: float = 500.0
dtw_weights: tuple[tuple[float, float, float], ...] = (
    (0.1, 0.4, 0.4),
    (1.0, 0.0, 0.0),
    (0.0, 1.0, 0.0),
    (0.0, 0.0, 1.0),
)
pattern: str = "asymmetric"

nb_procs: int = 3  # number of procs

# expected results
index_cl_pts_next_centerline_expected: list[list[list[int]]] = [
    [
      [0], [1], [2], [3], [4], [5], [6], [], [7], [8], [9], [10], [11], [12], [13], [], [14], 
      [15], [], [16], [], [17], [], [18], [19, 20, 21, 22, 23, 24, 25], [26, 27, 28, 29, 30, 31, 32, 33], 
      [34], [], [35], [], [36], [], [37], [38], [], [39], [40], [41], [42], [43], [44], [], [45], 
      [46], [47], [48], [49], [50], [51], [52], [53], [54], [55], [56], [], [57], [58], [59], [60], 
      [61], [62], [63], [64], [], [65], [66], [67], [], [68], [], [69], [], [70], 
      [71, 72, 73, 74, 75, 76, 77, 78, 79, 80], [81, 82, 83, 84, 85], [], [86], [], [87], 
      [], [88], [89], [], [90], [91], [92], [93], [94], [95], [], [96], [97], [98], [99], 
      [100], [101], [102], [103], [104], [105], [106], [], [107], [108], [109], [110], [111], 
      [112], [113], [114], [115], [], [116], [117], [118], [], [119], [], [120], [], [121], 
      [], [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134], [135, 136, 137], 
      [], [138], [], [139], [], [140], [141], [], [142], [143], [144], [145], [], [146], 
      [147], [148], [149], [150], [151], [152], [153], [154], [155, 156], [], [157], [], 
      [158], [159], [160], [161], [162], [163], [164], [165], [166], [], [167], [168], [169], 
      [], [170], [171], [], [172], [], [173], [], [174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188], 
      [], [189], [], [190], [], [191], [192], [], [193], [194], [195], [196], [], [197], [198], [199], 
      [200], [201], [202], [203], [204], [205], [206], [], [207], [208], [209], [210], [211], [212], 
      [213], [214], [215], [216], [217], [], [218], [219], [220], [221], [], [222], [223], [], [224], 
      [], [225], [], [226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240], [], 
      [241], [], [242], [], [243], [244], [], [245], [246], [247], [], [248], [249], [250], [251], [252], 
      [253], [254], [255], [256], [], [257], [258, 259], [], [260], [261], [262], [263], [264], [265], 
      [266], [267], [268], [], [269], [270], [271], [272], [], [273], [274], [], [275], [], [276], [], 
      [277, 278, 279, 280, 281, 282, 283, 284, 285, 286], [287, 288, 289, 290, 291, 292], [], [293], [], 
      [294], [], [295], [], [296], [297], [298], [], [299], [300], [301], [302], [303], [304], [305], 
      [306], [], [307], [308], [309], [310], [311], [312], [313], [314], [315], [316], [317], [318], 
      [], [319], [], [320], [321, 322, 323], [324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336]
    ],
    [
     [0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12, 13], [14], [15],
     [16], [17], [18], [19], [20], [21, 22], [23], [24], [25], [26], [27], [28, 29], [30], [31],
     [32], [33], [34], [35], [36], [37], [38, 39], [40], [41], [42], [43], [44], [45], [46],
     [47], [48], [49], [50], [51], [52], [53], [54], [55], [56], [57], [58], [59], [60], [61], [62],
     [63], [64, 65], [66], [67], [68], [69], [70], [71], [72, 73], [74], [75], [76], [77], [78],
     [79, 80], [81], [82], [83], [84], [85], [86], [87], [88, 89], [90], [91], [92], [93], [94],
     [95], [96], [97], [98], [99], [100], [101], [102], [103], [104], [105], [106], [107], [108],
     [109], [110], [111], [112], [113], [114], [115], [116], [117, 118], [119], [120], [121], [122],
     [123, 124], [125], [126], [127], [128], [129, 130], [131], [132], [133], [134], [135], [136], [137, 138],
     [139], [140], [141], [142], [143], [144], [145], [146], [147], [148], [149], [150], [151], [152],
     [153], [154], [155], [156], [157], [158], [159], [160], [161], [162], [163], [164], [165], [166],
     [167], [168], [169, 170], [171], [172], [173], [174], [175, 176], [177], [178], [179], [180, 181], [182],
     [183], [184], [185], [186, 187], [188], [189], [190], [191], [192], [193], [194], [195], [196], [197],
     [198], [199], [200], [201], [202], [203], [204], [205], [206], [], [207], [208], [209], [210], [211],
     [212], [213, 214], [215], [216], [217], [218], [219], [220], [221], [222, 223], [224], [225], [226], [227, 228],
     [229], [230], [231], [232, 233], [234], [235], [236], [237, 238], [239], [240], [241], [242], [243], [244],
     [245, 246], [247], [248], [], [249], [250], [251], [252], [253], [254], [255], [256], [257], [258],
     [], [259], [260], [261], [262], [263], [264], [265], [266], [267, 268], [269], [270], [271], [272], [273],
     [274, 275], [276], [277], [278], [279, 280], [281], [282], [283, 284], [285], [286], [287], [288, 289], [290], [291],
     [292], [293, 294], [295], [296], [297], [298], [299], [300], [301], [302], [303], [304], [], [305], [306],
     [307], [308], [309], [310], [], [311], [312], [313], [314], [315], [316], [317], [318], [319], [320],
     [321, 322], [323], [324], [325], [326], [327, 328], [329], [330], [331], [332, 333, 334, 335, 336],
    ],
    [
     [0], [], [1], [], [2], [], [3], [], [4], [], [5], [], [6], [], [7], [], [8], [], [9], [], [10], [], [11], [], [12], 
     [], [13], [], [14], [], [15], [], [16], [], [17], [], [18], [], [19], [], [20], [], [21], [], [22], [], [23], [], 
     [24], [], [25], [], [26], [], [27], [], [28], [], [29], [], [30], [], [31], [], [32], [], [33], [], [34], [], [35], 
     [], [36], [], [37], [], [38], [], [39], [], [40], [], [41], [], [42], [], [43], [], [44], [], [45], [], [46], [], 
     [47], [], [48], [], [49], [], [50], [], [51], [], [52], [], [53], [], [54], [], [55], [], [56], [], [57], [], [58], 
     [], [59], [], [60], [], [61], [], [62], [], [63], [], [64], [], [65], [], [66], [], [67], [], [68], [], [69], [], 
     [70], [], [71], [], [72], [], [73], [], [74], [], [75], [], [76], [], [77], [], [78], [], [79], [], [80], [], [81], 
     [], [82], [], [83], [], [84], [], [85], [], [86], [], [87], [], [88], [], [89], [], [90], [], [91], [], [92], [], 
     [93], [], [94], [], [95], [], [96], [], [97], [], [98], [], [99], [], [100], [], [101], [], [102], [], [103], [], 
     [104], [], [105], [], [106], [], [107], [], [108], [], [109], [], [110], [], [111], [], [112], [], [113], [], [114], 
     [], [115], [], [116], [], [117], [], [118], [], [119], [], [120], [], [121], [], [122], [], [123], [], [124], [], 
     [125], [], [126], [], [127], [], [128], [], [129], [], [130], [], [131], [], [132], [], [133], [], [134], [], [135], 
     [], [136], [], [137], [], [138], [], [139], [], [140], [], [141], [], [142], [], [143], [], [144], [], [145], [], 
     [146], [], [147], [], [148], [], [149], [], [150], [], [151], [], [152], [], [153], 
     [154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 
      176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 
      198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 
      220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 
      242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 
      264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 
      286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 
      308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 
      330, 331, 332, 333, 334, 335, 336],
    ],
    [[0], [1], [2], [3], [4], [5], [6], [], [7], [8], [9], [10], [11], [12], [13], [], [14], [15], [], [16], [], [17], 
     [], [18], [], [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [34], [], [35], [], [36], [], [37], 
     [38], [], [39], [40], [41], [42], [43], [44], [], [45], [46], [47], [48], [49], [50], [51], [52], [53], [54], [55], 
     [56], [], [57], [58], [59], [60], [61], [62], [63], [64], [], [65], [66], [67], [], [68], [], [69], [], [70], 
     [71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], [85], [], [86], [], [87], [], [88], [89], [], [90], [91], 
     [92], [93], [94], [], [95], [96], [97], [98], [99], [100], [101], [102], [103], [104], [105], [106], [], [107], 
     [108], [109], [110], [111], [112], [113], [114], [115], [], [116], [117], [118], [], [119], [], [120], [], [121], 
     [], [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136], [137], [], [138], [], [139], [], 
     [140], [141], [], [142], [143], [144], [145], [], [146], [147], [148], [149], [150], [151], [152], [153], [154], 
     [155, 156], [], [157], [], [158], [159], [160], [161], [162], [163], [164], [165], [166], [], [167], [168], [169], 
     [], [170], [171], [], [172], [], [173], [], [174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188], 
     [], [189], [], [190], [], [191], [192], [], [193], [194], [195], [196], [], [197], [198], [199], [200], [201], [202], 
     [203], [204], [205], [206], [], [207], [208], [209], [210], [211], [212], [213], [214], [215], [216], [217], [], [218], 
     [219], [220], [221], [], [222], [223], [], [224], [], [225], [], [226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 
      236, 237, 238, 239, 240], [], [241], [], [242], [], [243], [244], [], [245], [246], [247], [], [248], [249], [250], 
     [251], [252], [253], [254], [255], [256], [], [257], [], [258, 259], [260], [261], [262], [263], [264], [265], [266], 
     [267], [268], [], [269], [270], [271], [272], [], [273], [274], [], [275], [], [276], [], [277], 
     [278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292], [], [293], [], [294], [], [295], [], 
     [296], [297], [298], [], [299], [300], [301], [302], [303], [304], [305], [306], [], [307], [308], [309], [310], 
     [311], [312], [313], [314], [315], [316], [317], [318], [], [319], [], [320], [321, 322, 323], 
     [324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336]
    ],
]

index_cl_pts_prev_centerline_expected: list[list[int]] = [
    [0, 1, 2, 3, 5, 6, 7, 8, 9, 11, 12, 13, 15, 16, 18, 20, 22, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     25, 27, 29, 31, 32, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 64,
     66, 68, 70, 70, 70, 70, 70, 70, 70, 71, 71, 71,71, 71, 71, 71, 71, 71, 71, 72, 74, 76, 78, 80, 81, 82, 84, 85, 86, 87,
     88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 111, 113, 115, 117, 117, 117, 117, 117,
     117, 117, 117, 117, 118, 118, 118, 118, 118, 118, 118, 118, 119, 121, 123, 125, 127, 128, 130, 131, 132, 133, 134, 136,
     137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 158, 160, 162, 164, 164, 164, 164,
     164, 164, 164, 164, 164, 164, 164, 165, 165, 165, 165, 165, 165, 167, 169, 171, 172, 174, 175, 177, 178, 179, 180, 182,
     183, 184, 185, 187, 189, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 202, 204, 206, 208, 210, 211, 211, 211,
     211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 212, 212, 212, 212, 214,216, 218, 220, 221, 223, 224, 225, 226, 228,
     229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 247, 248, 249, 251, 253, 255, 257, 258, 258, 
     258, 258,258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 259, 259, 261, 263, 265, 267, 268, 270, 271, 272, 274,
     275, 276, 277, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 280, 282,],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 22, 23, 24, 25, 26, 27, 28, 29,
     30, 31, 32, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,50, 51, 52, 53, 54, 55, 56, 57, 58,
     59, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 77, 78, 79, 80, 81, 82, 83, 84, 85,
     86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 105, 106, 107, 108, 109, 110, 111,
     112, 113, 113, 114, 115, 116, 117, 118, 119, 120, 121, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
     134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 152, 153, 154, 155, 156,
     157, 158, 158, 159, 160, 161, 162, 163, 164, 165, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
     179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 198, 199, 200, 201,
     202, 203, 204, 204, 205, 206, 207, 208, 209, 210, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223,
     224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 245, 246,
     247, 248, 249, 250, 250, 251, 252, 253, 254, 255, 255, 256, 257, 258, 259, 260, 261, 262, 263, 263, 264, 265, 266, 267,
     269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 284, 284, 284, 284,],
    [ 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60,
     62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116,
     118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164,
     166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212,
     214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260,
     262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
     284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
     284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
     284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
     284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
     284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
     284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
     284, 284, 284, 284, 284, 284, 284, 284,],
    [0, 1, 2, 3, 5, 6, 7, 8, 9, 11, 12, 13, 15, 16, 18, 20, 22, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 
     24, 25, 27, 29, 31, 32, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 
     64, 66, 68, 70, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 72, 74, 76, 78, 79, 81, 82, 84, 85, 86, 
     87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 111, 113, 115, 117, 118, 118, 118, 
     118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 119, 121, 123, 125, 127, 128, 130, 131, 132, 133, 135, 
     136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 158, 160, 162, 164, 165, 165, 
     165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 167, 169, 171, 172, 174, 175, 177, 178, 179, 180, 
     182, 183, 184, 185, 187, 189, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 202, 204, 206, 208, 210, 212, 212, 
     212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 214, 216, 218, 220, 221, 223, 224, 225, 226, 
     228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 247, 248, 249, 251, 253, 255, 257, 259, 
     259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 261, 263, 265, 267, 268, 270, 271, 272, 
     274, 275, 276, 277, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 280, 282],
    ]

map_dataset = load_centerline_collection_dataset_from_Flumy_csv(
            filepath_cl_collection, sep=";"
)
centerline_collec = CenterlineCollection(
    map_dataset,
    spacing,
    smooth_distance,
    use_fix_nb_points,
    filtering_window,
    sinuo_thres,
    compute_curvature,
    interpol_props,
    find_bends,
)
assert centerline_collec is not None, "Centerline_collection is null. Check CenterlineCollection tests."

class TestsCenterlineCollectionWarper(unittest.TestCase):
    def test_warper_initialization(self: Self) ->None:
        """Test of CenterlineCollectionWarper initialization."""
        warper: CenterlineCollectionWarper = CenterlineCollectionWarper(centerline_collec)
        self.assertIsNotNone(warper)
        self.assertIsNotNone(warper._cl_collec)
        self.assertEqual(len(warper._cl_collec.get_all_ages()), len(map_dataset))

    #@unittest.skip("")
    def test_centerlines_matching_monoproc(self: Self) -> None:
        """Test of CenterlineCollectionWarper.match_centerlines function using single processing."""
        warper: CenterlineCollectionWarper = CenterlineCollectionWarper(centerline_collec)
        if warper is None:
            self.skipTest("CenterlineCollectionWarper is null.")

        for i, weights in enumerate(dtw_weights):
            try:
                warper.match_centerlines(
                    dmax,
                    weights[0],
                    weights[1],
                    weights[2],
                    filtering_window,
                    pattern,
                )
            except Exception as err:
                print(err)
                self.fail(
                    "CenterlineCollectionWarper match centerline: Unable to match centerlines."
                )

            index_cl_pts_prev_centerline: list[int] = (
                warper._cl_collec.centerlines[50].index_cl_pts_prev_centerline
            )
            self.assertSequenceEqual(
                index_cl_pts_prev_centerline_expected[i],
                index_cl_pts_prev_centerline[:-1],
                "Centerline matching: index_cl_pts_prev_centerline at weight index %s"
                % i,
            )

            index_cl_pts_next_centerline: list[list[int]] = (
                warper._cl_collec.centerlines[50].index_cl_pts_next_centerline
            )
            for l_indexes, l_indexes_expected in zip(
                index_cl_pts_next_centerline,
                index_cl_pts_next_centerline_expected[i],
                strict=False,
            ):
                self.assertSequenceEqual(
                    l_indexes,
                    l_indexes_expected,
                    "Centerline matching: index_cl_pts_next_centerline at weight index %s"
                    % i,
                )

    #@unittest.skip("")
    def test_centerlines_matching_multiproc(self: Self) -> None:
        """Test of CenterlineCollection.match_centerlines function using multi-processing."""
        set_nb_procs(nb_procs)
        warper: CenterlineCollectionWarper = CenterlineCollectionWarper(centerline_collec)
        if centerline_collec is None:
            self.skipTest("Centerline_collection is null.")

        for i, weights in enumerate(dtw_weights):
            try:
                warper._cl_collec.match_centerlines(
                    dmax,
                    weights[0],
                    weights[1],
                    weights[2],
                    filtering_window,
                    pattern,
                )
            except Exception as err:
                print(err)
                self.fail(
                    "Centerline_collection match centerline: Unable to match centerlines."
                )

            index_cl_pts_prev_centerline: list[int] = (
                warper._cl_collec.centerlines[50].index_cl_pts_prev_centerline
            )
            print("Prev ctl, ", i)
            print(index_cl_pts_prev_centerline)
            self.assertSequenceEqual(
                index_cl_pts_prev_centerline[:-1],
                index_cl_pts_prev_centerline_expected[i],
                "Centerline matching: index_cl_pts_prev_centerline at weight index %s"
                % i,
            )

            index_cl_pts_next_centerline: list[list[int]] = (
                warper._cl_collec.centerlines[50].index_cl_pts_next_centerline
            )
            print("Next ctl, ", i)
            print(index_cl_pts_next_centerline)
            for l_indexes, l_indexes_expected in zip(
                index_cl_pts_next_centerline,
                index_cl_pts_next_centerline_expected[i],
                strict=False,
            ):
                self.assertSequenceEqual(
                    l_indexes,
                    l_indexes_expected,
                    "Centerline matching: index_cl_pts_next_centerline at weight index %s"
                    % i,
                )
        set_nb_procs(1)
